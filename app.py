"""
Streamlit application for extracting transcripts from YouTube videos.

This small web app provides a single text field for the user to paste
a YouTube video URL. After pressing the button, the app fetches
the transcript using the ``youtube‑transcript‑api`` library and
displays it in a scrollable text area. A download button allows
the transcript to be saved as a simple ``.txt`` file.

To run this app locally use:

    streamlit run app.py

The app is intentionally minimal to make it easy to host on platforms
like Streamlit Community Cloud. Users can copy or download the
transcript directly from their browser. For automatic copy to the
clipboard in the browser you would need additional JavaScript;
this basic version opts for manual copy via a text area.
"""

import re
from typing import Optional

import streamlit as st
from youtube_transcript_api import YouTubeTranscriptApi
import openai
import json
import streamlit.components.v1 as components

# Embed the OpenAI API key directly. This key is used to authenticate
# requests when generating summaries. Treat this as a secret and avoid
# exposing it in public repositories.
OPENAI_API_KEY = "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"


def extract_video_id(url: str) -> Optional[str]:
    """Extract the YouTube video ID from a variety of URL formats.

    Args:
        url: A full YouTube URL or just the video ID.

    Returns:
        The video ID if found, else ``None``.
    """
    # Regular expression covers standard YouTube links and the shorter youtu.be format
    pattern = r"(?:v=|/)([0-9A-Za-z_-]{11})"
    match = re.search(pattern, url)
    return match.group(1) if match else None


def fetch_transcript(video_id: str) -> str:
    """Fetch the transcript for the given YouTube video ID.

    The youtube-transcript-api removed static methods like ``get_transcript`` in
    version 1.2.0. Therefore we instantiate the API class and call the
    ``fetch`` method on the video ID. The returned Transcript object provides
    ``to_raw_data`` which yields a list of transcript segments. We join their
    text into a single string separated by newlines.

    Args:
        video_id: The 11-character ID of the YouTube video.

    Returns:
        The full transcript as a single string.

    Raises:
        Exception: If fetching the transcript fails for any reason.
    """
    ytt_api = YouTubeTranscriptApi()
    transcript = ytt_api.fetch(video_id)
    # ``to_raw_data`` returns a list of dictionaries with 'text', 'start' and 'duration'
    raw_data = transcript.to_raw_data()
    return "\n".join(entry["text"] for entry in raw_data)

def summarize_transcript(transcript: str) -> str:
    """Summarize a transcript using the OpenAI chat completions API.

    Given the full transcript text and a valid OpenAI API key, this function
    sends the transcript to the ChatGPT model with a detailed prompt that
    asks it to extract key concepts, tools, methods, examples and practical
    lessons in an organised way. It returns the summary as a string.

    Args:
        transcript: The raw transcript text to summarise.
        api_key: A valid OpenAI API key.

    Returns:
        The structured summary generated by the ChatGPT API.

    Raises:
        Exception: If the API request fails for any reason.
    """
    # Use the embedded API key for authentication
    openai.api_key = OPENAI_API_KEY
    system_message = (
        "أنت محلل محتوى محترف وخبير في تبسيط المعلومات المعقدة وتحويلها إلى نقاط واضحة ومنظمة.\\n"
        "لدي فيديو يحتوي على معلومات تعليمية أو معرفية. أريدك أن تستخرج كل المفاهيم المهمة، "
        "الأدوات، الطرق، الأمثلة، والنصائح العملية منه. قسّم الملخص إلى أقسام بعناوين فرعية، وضع "
        "نقاط رئيسية تحت كل قسم، واشرح أي فكرة أو مصطلح صعب بلغة بسيطة. أضف الدروس العملية، "
        "النماذج الذهنية، والأفكار القابلة للتطبيق. اجعل البداية ملخصًا عامًا بالنقاط الرئيسية، "
        "ثم التحليل التفصيلي. الأسلوب احترافي وسهل الفهم."
    )
    messages = [
        {"role": "system", "content": system_message},
        {"role": "user", "content": transcript},
    ]
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=messages,
        temperature=0.3,
    )
    return response.choices[0].message["content"].strip()


def main() -> None:
    """Main entry point for the Streamlit app."""
    st.set_page_config(page_title="YouTube Transcript Copier", page_icon="📋")
    st.title("YouTube Transcript Copier")
    st.write(
        "Paste a YouTube video URL below and click **Get Transcript** to fetch its"
        " captions as text. You can then download the transcript as a file or copy"
        " the text manually from the box."
    )

    # Input field for the YouTube link
    video_url = st.text_input(
        "Enter YouTube Video URL:",
        placeholder="https://www.youtube.com/watch?v=example",
        key="video_url",
    )

    # Button to trigger the fetch
    if st.button("Get Transcript", key="fetch_button"):
        if not video_url:
            st.error("Please enter a YouTube URL.")
            return

        video_id = extract_video_id(video_url)
        if video_id is None:
            st.error("Invalid YouTube URL. Please check the link and try again.")
            return

        # Attempt to fetch the transcript
        with st.spinner("Fetching transcript..."):
            try:
                transcript = fetch_transcript(video_id)
            except Exception as exc:
                st.error(
                    f"Sorry, there was a problem fetching the transcript: {exc}."
                )
                return

        # Display and provide download
        st.success("Transcript fetched successfully!")
        st.write("Below is the transcript of your video. You can scroll and copy.")
        st.text_area(
            "Transcript",
            transcript,
            height=300,
            help="Click inside and press Ctrl+A to select all.",
        )
        st.download_button(
            label="Download Transcript as .txt",
            data=transcript,
            file_name="youtube_transcript.txt",
            mime="text/plain",
        )

        # Provide a button to copy the transcript to the clipboard
        components.html(
            f'''
            <button style="margin-top:10px;padding:8px 12px;font-size:14px;"
                    onclick="navigator.clipboard.writeText({json.dumps(transcript)})">
                Copy Transcript
            </button>
            ''',
            height=50,
        )

        # Automatically generate and display a summary using OpenAI
        with st.spinner("Generating summary..."):
            try:
                summary = summarize_transcript(transcript)
                st.success("Summary generated successfully!")
            except Exception as e:
                st.error(f"Failed to generate summary: {e}")
                summary = ""
        if summary:
            st.write("Summary:")
            st.markdown(summary)
            # Provide a button to copy the summary to the clipboard
            components.html(
                f'''
                <button style="margin-top:10px;padding:8px 12px;font-size:14px;"
                        onclick="navigator.clipboard.writeText({json.dumps(summary)})">
                    Copy Summary
                </button>
                ''',
                height=50,
            )


if __name__ == "__main__":
    main()
